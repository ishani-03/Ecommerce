{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nodejs\\\\ecomm\\\\client\\\\src\\\\pages\\\\collection\\\\Collection.js\";\nimport React, { useEffect } from 'react';\nimport './Collection.scss';\nimport CollectionItem from '../../components/CollectionItem/CollectionItem';\nimport { connect } from 'react-redux'; // import {createStructuredSelector} from 'reselect'\n\nimport { selectCollection } from '../../redux/shop/ShopSelector';\nimport { firestore } from '../../firebase/Firebase';\n\nconst Collection = ({\n  collection\n}) => {\n  useEffect(() => {\n    console.log('I am subscribing');\n    const unsubscribeFromCollections = firestore.collection('collections').onSnapshot(snapshot => console.log(snapshot));\n    return () => {\n      console.log('I am unsubscribed');\n      unsubscribeFromCollections();\n    }; //this return function is a clean-up function which can mimic any lifecycle method. here, componentWillUnmount\n  }, []);\n  console.log('collection', collection);\n  const {\n    title,\n    items\n  } = collection;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"collection-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, items.map(item => /*#__PURE__*/React.createElement(CollectionItem, {\n    key: item.id,\n    item: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 19\n    }\n  }))));\n};\n\nconst mapStateToProps = (state, ownProps) => ({\n  collection: selectCollection(ownProps.match.params.collectionId)(state)\n});\n/* {We have not used createStructuredSelector because unlike other selectors,\n this selector needs a part of the state depending on the URL parameter} */\n//ownProps are the props of the component that we are wrapping in our connect\n\n\nexport default connect(mapStateToProps)(Collection);","map":{"version":3,"sources":["C:/Nodejs/ecomm/client/src/pages/collection/Collection.js"],"names":["React","useEffect","CollectionItem","connect","selectCollection","firestore","Collection","collection","console","log","unsubscribeFromCollections","onSnapshot","snapshot","title","items","map","item","id","mapStateToProps","state","ownProps","match","params","collectionId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP;AACA,OAAOC,cAAP,MAA2B,gDAA3B;AACA,SAAQC,OAAR,QAAsB,aAAtB,C,CACA;;AACA,SAAQC,gBAAR,QAA+B,+BAA/B;AACA,SAAQC,SAAR,QAAyB,yBAAzB;;AAEA,MAAMC,UAAU,GAAE,CAAE;AAAEC,EAAAA;AAAF,CAAF,KAAoB;AAElCN,EAAAA,SAAS,CAAC,MAAI;AACVO,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,UAAMC,0BAA0B,GAAGL,SAAS,CAACE,UAAV,CAAqB,aAArB,EAAoCI,UAApC,CAA+CC,QAAQ,IAAIJ,OAAO,CAACC,GAAR,CAAYG,QAAZ,CAA3D,CAAnC;AAEA,WAAM,MAAI;AACNJ,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAC,MAAAA,0BAA0B;AAC7B,KAHD,CAJU,CAQV;AACH,GATQ,EASP,EATO,CAAT;AAWAF,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBF,UAAzB;AACA,QAAM;AAAEM,IAAAA,KAAF;AAAUC,IAAAA;AAAV,MAAmBP,UAAzB;AACJ,sBACI;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBM,KAAvB,CADJ,eAEI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQC,KAAK,CAACC,GAAN,CAAUC,IAAI,iBACZ,oBAAC,cAAD;AAAgB,IAAA,GAAG,EAAEA,IAAI,CAACC,EAA1B;AAA8B,IAAA,IAAI,EAAED,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFR,CAFJ,CADJ;AAYC,CA3BD;;AA6BA,MAAME,eAAe,GAAG,CAACC,KAAD,EAASC,QAAT,MAAuB;AAC3Cb,EAAAA,UAAU,EAAEH,gBAAgB,CAACgB,QAAQ,CAACC,KAAT,CAAeC,MAAf,CAAsBC,YAAvB,CAAhB,CAAqDJ,KAArD;AAD+B,CAAvB,CAAxB;AAGA;;AAEA;;;AACA,eAAehB,OAAO,CAAEe,eAAF,CAAP,CAA2BZ,UAA3B,CAAf","sourcesContent":["import React , {useEffect} from 'react'\nimport './Collection.scss'\nimport CollectionItem from '../../components/CollectionItem/CollectionItem'\nimport {connect} from 'react-redux'\n// import {createStructuredSelector} from 'reselect'\nimport {selectCollection} from '../../redux/shop/ShopSelector'\nimport {firestore } from '../../firebase/Firebase'\n\nconst Collection =( { collection }) =>{\n\n    useEffect(()=>{\n        console.log('I am subscribing')\n        const unsubscribeFromCollections = firestore.collection('collections').onSnapshot(snapshot => console.log(snapshot))\n\n        return()=>{\n            console.log('I am unsubscribed')\n            unsubscribeFromCollections()\n        }\n        //this return function is a clean-up function which can mimic any lifecycle method. here, componentWillUnmount\n    },[])\n\n    console.log('collection',collection)\n    const { title , items} = collection;\nreturn(\n    <div className='collection-page'>\n        <h2 className='title'>{title}</h2>\n        <div className='items'>\n            {\n                items.map(item=>( \n                  <CollectionItem key={item.id} item={item} /> \n                    ))\n            }\n        </div>\n    </div>\n)\n}\n\nconst mapStateToProps = (state , ownProps) => ({\n    collection :selectCollection(ownProps.match.params.collectionId)(state)\n}) \n/* {We have not used createStructuredSelector because unlike other selectors,\n this selector needs a part of the state depending on the URL parameter} */\n//ownProps are the props of the component that we are wrapping in our connect\nexport default connect (mapStateToProps) (Collection)\n"]},"metadata":{},"sourceType":"module"}