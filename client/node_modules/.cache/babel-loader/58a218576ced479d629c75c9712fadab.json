{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nodejs\\\\ecomm\\\\src\\\\pages\\\\shop\\\\Shop.js\";\nimport React from 'react';\nimport CollectionOverview from '../../components/collection-overview/CollectionOverview';\nimport { Route } from 'react-router-dom';\nimport Collection from '../collection/Collection';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/Firebase';\nimport { connect } from 'react-redux'; // import { updateCollections } from '../../redux/shop/ShopActions'\n\nimport { createStructuredSelector } from 'reselect';\nimport { fetchCollectionsStartAsync } from '../../redux/shop/ShopActions';\nimport WithSpinner from '../../components/withSpinner/WithSpinner';\nimport { selectIsCollectionFetching } from '../../redux/shop/ShopSelector';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionWithSpinner = WithSpinner(Collection);\n\nclass Shop extends React.Component {\n  // state = {\n  //     loading : true\n  // }\n  // unsubscribeFromSnapshot=null;\n  // componentDidMount(){\n  //     const { updateCollections } = this.props\n  //     const collectionRef= firestore.collection('collections');\n  //     // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n  //     //     // console.log(snapshot)\n  //     //     const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n  //     //     console.log(collectionsMap)\n  //     //     updateCollections(collectionsMap)\n  //     //     this.setState({ loading : false })\n  //     // }) ** This is object returning method\n  //     collectionRef.get().then(\n  //         snapshot => {\n  //                 // console.log(snapshot)\n  //                 const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n  //                 console.log(collectionsMap)\n  //                 updateCollections(collectionsMap)\n  //                 this.setState({ loading : false })\n  //             }\n  //     ) //**this is a promise based request\n  //     // fetch('https://firestore.googleapis.com/v1/projects/crown-db-f5972/databases/(default)/documents/collections')\n  //     // .then(response => response.json())\n  //     // .then(collections => console.log(collections))\n  //     // collectionRef.get().then(\n  //     //     snapshot => {\n  //     //             // console.log(snapshot)\n  //     //             const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n  //     //             console.log(collectionsMap)\n  //     //             updateCollections(collectionsMap)\n  //     //             this.setState({ loading : false })\n  //     //         }\n  //     // )\n  // }\n  componentDidMount() {\n    const {\n      fetchCollectionsStartAsync\n    } = this.props;\n    fetchCollectionsStartAsync();\n  }\n\n  render() {\n    const {\n      match,\n      isCollectionFetching\n    } = this.props; // const { loading } = this.state\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 42\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionWithSpinner, Object.assign({\n        isLoading: isCollectionFetching\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 42\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shop);","map":{"version":3,"sources":["C:/Nodejs/ecomm/src/pages/shop/Shop.js"],"names":["React","CollectionOverview","Route","Collection","firestore","convertCollectionsSnapshotToMap","connect","createStructuredSelector","fetchCollectionsStartAsync","WithSpinner","selectIsCollectionFetching","CollectionOverviewWithSpinner","CollectionWithSpinner","Shop","Component","componentDidMount","props","render","match","isCollectionFetching","path","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,yDAA/B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAAQC,SAAR,EAAoBC,+BAApB,QAA0D,yBAA1D;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,SAASC,0BAAT,QAA2C,+BAA3C;AAGA,MAAMC,6BAA6B,GAAGF,WAAW,CAACR,kBAAD,CAAjD;AACA,MAAMW,qBAAqB,GAAGH,WAAW,CAACN,UAAD,CAAzC;;AAGA,MAAMU,IAAN,SAAmBb,KAAK,CAACc,SAAzB,CAAoC;AAChC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,iBAAiB,GAAG;AAChB,UAAM;AAAEP,MAAAA;AAAF,QAAiC,KAAKQ,KAA5C;AAEAR,IAAAA,0BAA0B;AAC3B;;AAEHS,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA,KAAD;AAASC,MAAAA;AAAT,QAAiC,KAAKH,KAA5C,CADI,CAEJ;;AACJ,wBACQ;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAE,KAAF;AAAQ,MAAA,KAAK,MAAb;AAAc,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,EAAlC;AACA,MAAA,MAAM,EAAOJ,KAAF,iBAAc,oBAAC,6BAAD;AAA+B,QAAA,SAAS,EAAGG;AAA3C,SAAsEH,KAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI,oBAAE,KAAF;AAAQ,MAAA,KAAK,MAAb;AAAc,MAAA,IAAI,EAAG,GAAEE,KAAK,CAACE,IAAK,gBAAlC;AACA,MAAA,MAAM,EAAOJ,KAAF,iBAAc,oBAAC,qBAAD;AAAuB,QAAA,SAAS,EAAGG;AAAnC,SAA8DH,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADR;AASC;;AA7D+B;;AAgEpC,MAAMK,eAAe,GAAGd,wBAAwB,CAAE;AAC9CY,EAAAA,oBAAoB,EAAGT;AADuB,CAAF,CAAhD;;AAIA,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AACpCf,EAAAA,0BAA0B,EAAE,MAAMe,QAAQ,CAACf,0BAA0B,EAA3B;AADN,CAAL,CAAnC;;AAIA,eAAeF,OAAO,CAACe,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CT,IAA7C,CAAf","sourcesContent":["import React from 'react'\nimport CollectionOverview from '../../components/collection-overview/CollectionOverview'\nimport { Route } from 'react-router-dom'\nimport Collection from '../collection/Collection'\nimport {firestore , convertCollectionsSnapshotToMap} from '../../firebase/Firebase'\nimport { connect } from 'react-redux'\n// import { updateCollections } from '../../redux/shop/ShopActions'\nimport { createStructuredSelector } from 'reselect'\nimport { fetchCollectionsStartAsync } from '../../redux/shop/ShopActions';\nimport WithSpinner from '../../components/withSpinner/WithSpinner'\nimport { selectIsCollectionFetching } from '../../redux/shop/ShopSelector'\n\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview)\nconst CollectionWithSpinner = WithSpinner(Collection)\n\n\nclass Shop extends React.Component  {\n    // state = {\n    //     loading : true\n    // }\n    // unsubscribeFromSnapshot=null;\n\n    // componentDidMount(){\n    //     const { updateCollections } = this.props\n    //     const collectionRef= firestore.collection('collections');\n\n    //     // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //     //     // console.log(snapshot)\n    //     //     const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n    //     //     console.log(collectionsMap)\n    //     //     updateCollections(collectionsMap)\n    //     //     this.setState({ loading : false })\n    //     // }) ** This is object returning method\n\n    //     collectionRef.get().then(\n    //         snapshot => {\n    //                 // console.log(snapshot)\n    //                 const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n    //                 console.log(collectionsMap)\n    //                 updateCollections(collectionsMap)\n    //                 this.setState({ loading : false })\n    //             }\n    //     ) //**this is a promise based request\n\n    //     // fetch('https://firestore.googleapis.com/v1/projects/crown-db-f5972/databases/(default)/documents/collections')\n    //     // .then(response => response.json())\n    //     // .then(collections => console.log(collections))\n\n    //     // collectionRef.get().then(\n    //     //     snapshot => {\n    //     //             // console.log(snapshot)\n    //     //             const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n    //     //             console.log(collectionsMap)\n    //     //             updateCollections(collectionsMap)\n    //     //             this.setState({ loading : false })\n    //     //         }\n    //     // )\n    // }\n\n    componentDidMount() {\n        const { fetchCollectionsStartAsync } = this.props;\n    \n        fetchCollectionsStartAsync();\n      }\n\n    render(){\n        const {match , isCollectionFetching} = this.props;\n        // const { loading } = this.state\n    return(\n            <div className='shop-page'>\n                < Route exact path={`${match.path}`} \n                render = { ( props ) =>  <CollectionOverviewWithSpinner isLoading={ isCollectionFetching } {...props} /> } /> \n                < Route exact path={`${match.path}/:collectionId`} \n                render = { ( props ) =>  <CollectionWithSpinner isLoading={ isCollectionFetching } {...props} /> }  />\n            </div>\n        )\n        \n    }\n}\n\nconst mapStateToProps = createStructuredSelector ({\n    isCollectionFetching : selectIsCollectionFetching\n})\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n  });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shop)"]},"metadata":{},"sourceType":"module"}