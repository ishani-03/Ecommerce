{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nodejs\\\\ecomm\\\\client\\\\src\\\\components\\\\Sign-in\\\\SignIn.js\";\nimport React, { useState } from 'react';\nimport FormInput from '../Form-input/FormInput';\nimport CustomButton from '../Custom-button/CustomButton';\nimport './SignIn.scss'; // import {auth,signInWithGoogle} from '../../firebase/Firebase'\n\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/UserAction';\nimport { connect } from 'react-redux';\n\nconst SignIn = ({\n  emailSignInStart,\n  googleSignInStart\n}) => {\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n  const {\n    email,\n    password\n  } = userCredentials;\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    emailSignInStart(email, password); // try{\n    //     await auth.signInWithEmailAndPassword(email,password);\n    //     this.setState({email:'',password:''})\n    // }\n    // catch(error){\n    //     console.log(error)\n    // }\n    // this.setState({emial:'', password:''})\n    //** No more setState. Redux will handle the state from here on out with sagas */\n  };\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({ ...userCredentials,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"sign-in\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, \"I already have an account\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, \"Sign in with your email and password\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    required: true,\n    handleChange: handleChange,\n    label: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    required: true,\n    handleChange: handleChange,\n    label: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, \" Sign-In\"), /*#__PURE__*/React.createElement(CustomButton, {\n    type: \"button\",\n    onClick: googleSignInStart,\n    isGoogleSignIn: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, \"Google Sign-In\"))));\n};\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);","map":{"version":3,"sources":["C:/Nodejs/ecomm/client/src/components/Sign-in/SignIn.js"],"names":["React","useState","FormInput","CustomButton","googleSignInStart","emailSignInStart","connect","SignIn","userCredentials","setCredentials","email","password","handleSubmit","event","preventDefault","handleChange","value","name","target","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React , {useState} from 'react'\nimport FormInput from '../Form-input/FormInput'\nimport CustomButton from '../Custom-button/CustomButton'\nimport './SignIn.scss'\n// import {auth,signInWithGoogle} from '../../firebase/Firebase'\nimport { googleSignInStart , emailSignInStart } from '../../redux/user/UserAction'\nimport {connect } from 'react-redux'\n\n\n\nconst SignIn =({emailSignInStart , googleSignInStart})=>{\n\n    const [userCredentials, setCredentials] = useState({email:'', password:''})\n    const {email,password}= userCredentials;\n\n\n    const handleSubmit=async event=>{\n        event.preventDefault();\n        \n        \n        emailSignInStart(email , password)\n        // try{\n        //     await auth.signInWithEmailAndPassword(email,password);\n        //     this.setState({email:'',password:''})\n        // }\n        // catch(error){\n        //     console.log(error)\n        // }\n        // this.setState({emial:'', password:''})\n        //** No more setState. Redux will handle the state from here on out with sagas */\n\n    }\n\n\n    const handleChange=(event)=>{\n        const{value,name}=event.target;\n        setCredentials({ ...userCredentials , [name]:value})\n    }\n\n\n        return(\n            <div className='sign-in'>\n                <h2>I already have an account</h2>\n                <span>Sign in with your email and password</span>\n\n                <form onSubmit={handleSubmit}>\n                    <FormInput name=\"email\" type=\"email\" value={email} required\n                    handleChange={handleChange} label='email'></FormInput>\n                    <FormInput name=\"password\" type=\"password\" value={password} required\n                    handleChange={handleChange} label='password'></FormInput>\n                    <div className='buttons'>\n                    <CustomButton type='submit'> Sign-In</CustomButton>\n                    <CustomButton type='button' onClick={googleSignInStart} isGoogleSignIn>Google Sign-In</CustomButton>\n                    </div>\n                </form>\n            </div>\n        )\n    \n}\n\n\nconst mapDispatchToProps = dispatch =>({\n    googleSignInStart : () => dispatch(googleSignInStart()),\n    emailSignInStart : (email,password) => dispatch(emailSignInStart({email, password}))\n})\n\nexport default connect (null,mapDispatchToProps)(SignIn) \n"]},"metadata":{},"sourceType":"module"}