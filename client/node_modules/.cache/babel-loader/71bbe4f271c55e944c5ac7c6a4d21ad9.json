{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './UserTypes';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/Firebase'; // import {googleSignInSuccess , googleSignInFailure , emailSignInSuccess , emailSignInFailure } from './UserAction'\n\nimport { signInSuccess, signInFailure } from './UserAction';\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user); // const userRef = await createUserProfileDocument(userAuth); <-- the above line is same as this\n\n    const userSnapshot = yield userRef.get(); // Remember: 'put' puts things back into our regular redux flow\n\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n    console.log(userRef);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n    console.log(userRef);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Nodejs/ecomm/src/redux/user/UserSaga.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","signInSuccess","signInFailure","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","SignInSuccess","id","data","console","log","error","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAsBC,GAAtB,EAA4BC,GAA5B,EAAkCC,IAAlC,QAA8C,oBAA9C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,EAAgCC,yBAAhC,QAAiE,yBAAjE,C,CACA;;AACA,SAAQC,aAAR,EAAwBC,aAAxB,QAA6C,cAA7C;AAEA,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,MAAG;AAEC,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMN,IAAI,CAACO,eAAL,CAAqBN,cAArB,CAArB;AACA,UAAMO,OAAO,GAAG,MAAMV,IAAI,CAACI,yBAAD,EAA4BI,IAA5B,CAA1B,CAHD,CAIC;;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CALD,CAMC;;AACA,UAAMd,GAAG,CAACe,aAAa,CAAC;AAACC,MAAAA,EAAE,EAAEH,YAAY,CAACG,EAAlB;AAAuB,SAAGH,YAAY,CAACI,IAAb;AAA1B,KAAD,CAAd,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AAEH,GAVD,CAUC,OAAMQ,KAAN,EAAY;AACT,UAAMpB,GAAG,CAACQ,aAAa,CAACY,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAOC,IAAAA;AAAP;AAAV,CAA1B,EAAsD;AACzD,MAAG;AACC,UAAM;AAACd,MAAAA;AAAD,QAAS,MAAMN,IAAI,CAACqB,0BAAL,CAAgCF,KAAhC,EAAsCC,QAAtC,CAArB;AACA,UAAMZ,OAAO,GAAG,MAAMV,IAAI,CAACI,yBAAD,EAA4BI,IAA5B,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACe,aAAa,CAAC;AAACC,MAAAA,EAAE,EAAEH,YAAY,CAACG,EAAlB;AAAuB,SAAGH,YAAY,CAACI,IAAb;AAA1B,KAAD,CAAd,CAAT;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACH,GAND,CAOA,OAAMQ,KAAN,EAAY;AACV,UAAOpB,GAAG,CAACQ,aAAa,CAACY,KAAD,CAAd,CAAV;AACD;AACJ;AAGD,OAAO,UAAUM,mBAAV,GAA+B;AAClC,QAAM3B,UAAU,CAACI,eAAe,CAACwB,oBAAjB,EAAuClB,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUmB,kBAAV,GAA8B;AACjC,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,mBAAjB,EAAsCR,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUS,SAAV,GAAqB;AACxB,QAAM7B,GAAG,CAAC,CACNC,IAAI,CAACwB,mBAAD,CADE,EAENxB,IAAI,CAAC0B,kBAAD,CAFE,CAAD,CAAT;AAKH","sourcesContent":["import { takeLatest , put , all , call } from 'redux-saga/effects'\r\nimport UserActionTypes from './UserTypes'\r\nimport { auth, googleProvider , createUserProfileDocument } from '../../firebase/Firebase'\r\n// import {googleSignInSuccess , googleSignInFailure , emailSignInSuccess , emailSignInFailure } from './UserAction'\r\nimport {signInSuccess , signInFailure } from './UserAction'\r\n\r\nexport function* signInWithGoogle(){\r\n    try{\r\n\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        const userRef = yield call(createUserProfileDocument, user)\r\n        // const userRef = await createUserProfileDocument(userAuth); <-- the above line is same as this\r\n        const userSnapshot = yield userRef.get()\r\n        // Remember: 'put' puts things back into our regular redux flow\r\n        yield put(SignInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \r\n        console.log(userRef)\r\n\r\n    }catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({payload: {email,password}}){\r\n    try{\r\n        const {user} = yield auth.signInWithEmailAndPassword(email,password)\r\n        const userRef = yield call(createUserProfileDocument, user)\r\n        const userSnapshot = yield userRef.get()\r\n        yield put(SignInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \r\n        console.log(userRef)\r\n    }\r\n    catch(error){\r\n      yield  put(signInFailure(error))\r\n    }\r\n}\r\n\r\n\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* userSagas(){\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart)\r\n    ])\r\n        \r\n}"]},"metadata":{},"sourceType":"module"}