{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './UserTypes';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/Firebase'; // import {googleSignInSuccess , googleSignInFailure , emailSignInSuccess , emailSignInFailure } from './UserAction'\n\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './UserAction';\nexport function* getSnapshotFomUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n    console.log(userRef);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFomUserAuth(user); // const userRef = yield call(createUserProfileDocument, user)\n    // // const userRef = await createUserProfileDocument(userAuth); <-- the above line is same as this\n    // const userSnapshot = yield userRef.get()\n    // // Remember: 'put' puts things back into our regular redux flow\n    // yield put(signInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \n    // console.log(userRef)\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFomUserAuth(user); // const userRef = yield call(createUserProfileDocument, user)\n    // const userSnapshot = yield userRef.get()\n    // yield put(signInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \n    // console.log(userRef)\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) {\n      return;\n    }\n\n    yield getSnapshotFomUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart)]);\n}","map":{"version":3,"sources":["C:/Nodejs/ecomm/src/redux/user/UserSaga.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","getSnapshotFomUserAuth","userAuth","userRef","userSnapshot","get","id","data","console","log","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest , put , all , call } from 'redux-saga/effects'\r\nimport UserActionTypes from './UserTypes'\r\nimport { auth, googleProvider , createUserProfileDocument , getCurrentUser } from '../../firebase/Firebase'\r\n// import {googleSignInSuccess , googleSignInFailure , emailSignInSuccess , emailSignInFailure } from './UserAction'\r\nimport {signInSuccess , signInFailure, signOutSuccess , signOutFailure } from './UserAction'\r\n\r\nexport function* getSnapshotFomUserAuth(userAuth){\r\n    try{\r\n        const userRef = yield call(createUserProfileDocument, userAuth)\r\n        const userSnapshot = yield userRef.get()\r\n        yield put(signInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \r\n        console.log(userRef)\r\n    }\r\n    catch(error){\r\n      yield  put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle(){\r\n    try{\r\n\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFomUserAuth(user)\r\n        // const userRef = yield call(createUserProfileDocument, user)\r\n        // // const userRef = await createUserProfileDocument(userAuth); <-- the above line is same as this\r\n        // const userSnapshot = yield userRef.get()\r\n        // // Remember: 'put' puts things back into our regular redux flow\r\n        // yield put(signInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \r\n        // console.log(userRef)\r\n\r\n\r\n    }catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({payload: {email,password}}){\r\n    try{\r\n        const {user} = yield auth.signInWithEmailAndPassword(email,password)\r\n        yield getSnapshotFomUserAuth(user)\r\n        // const userRef = yield call(createUserProfileDocument, user)\r\n        // const userSnapshot = yield userRef.get()\r\n        // yield put(signInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \r\n        // console.log(userRef)\r\n    }\r\n    catch(error){\r\n      yield  put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\n    try{\r\n        const userAuth = yield getCurrentUser()\r\n        if(!userAuth){\r\n            return;\r\n        }\r\n        yield getSnapshotFomUserAuth(userAuth)\r\n    }\r\n    catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\n\r\nexport function* signOut(){\r\n    try{\r\n        yield auth.signOut()\r\n        yield put(signOutSuccess())\r\n    }catch(error){\r\n        yield put(signOutFailure(error))\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* onSignOutStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut )\r\n}\r\n\r\nexport function* userSagas(){\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart)\r\n    ])\r\n        \r\n}"]},"metadata":{},"sourceType":"module"}