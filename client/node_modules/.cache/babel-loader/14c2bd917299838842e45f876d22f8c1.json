{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nodejs\\\\ecomm\\\\src\\\\pages\\\\shop\\\\Shop.js\";\nimport React, { useEffect } from 'react';\nimport CollectionOverview from '../../components/collection-overview/CollectionOverview';\nimport { Route } from 'react-router-dom';\nimport Collection from '../collection/Collection'; // import {firestore , convertCollectionsSnapshotToMap} from '../../firebase/Firebase'\n\nimport { connect } from 'react-redux'; // import { updateCollections } from '../../redux/shop/ShopActions'\n\nimport { createStructuredSelector } from 'reselect'; // import { fetchCollectionsStartAsync } from '../../redux/shop/ShopActions';\n\nimport { fetchCollectionsStart } from '../../redux/shop/ShopActions';\nimport WithSpinner from '../../components/withSpinner/WithSpinner';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded } from '../../redux/shop/ShopSelector';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionWithSpinner = WithSpinner(Collection);\n\nconst Shop = ({\n  match,\n  isCollectionFetching,\n  isColletionsLoaded,\n  fetchCollectionsStart\n}) => {\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]); // state = {\n  //     loading : true\n  // }\n  // unsubscribeFromSnapshot=null;\n  // componentDidMount(){\n  //     const { updateCollections } = this.props\n  //     const collectionRef= firestore.collection('collections');\n  //     // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n  //     //     // console.log(snapshot)\n  //     //     const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n  //     //     console.log(collectionsMap)\n  //     //     updateCollections(collectionsMap)\n  //     //     this.setState({ loading : false })\n  //     // }) ** This is object returning method\n  //     collectionRef.get().then(\n  //         snapshot => {\n  //                 // console.log(snapshot)\n  //                 const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n  //                 console.log(collectionsMap)\n  //                 updateCollections(collectionsMap)\n  //                 this.setState({ loading : false })\n  //             }\n  //     ) //**this is a promise based request\n  //     // fetch('https://firestore.googleapis.com/v1/projects/crown-db-f5972/databases/(default)/documents/collections')\n  //     // .then(response => response.json())\n  //     // .then(collections => console.log(collections))\n  //     // collectionRef.get().then(\n  //     //     snapshot => {\n  //     //             // console.log(snapshot)\n  //     //             const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n  //     //             console.log(collectionsMap)\n  //     //             updateCollections(collectionsMap)\n  //     //             this.setState({ loading : false })\n  //     //         }\n  //     // )\n  // }\n  // componentDidMount() {\n  //     const { fetchCollectionsStart } = this.props;\n  //     // fetchCollectionsStartAsync();\n  //     fetchCollectionsStart();\n  //     //fetchCollectionsStart is the name of our saga\n  //   }\n  // const {match , isCollectionFetching , isColletionsLoaded} = this.props;\n  // const { loading } = this.state\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"shop-page\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}`,\n    render: props => /*#__PURE__*/React.createElement(CollectionOverviewWithSpinner, Object.assign({\n      isLoading: isCollectionFetching\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 42\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: `${match.path}/:collectionId`,\n    render: props => /*#__PURE__*/React.createElement(CollectionWithSpinner, Object.assign({\n      isLoading: !isColletionsLoaded\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 42\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }));\n};\n\nconst mapStateToProps = createStructuredSelector({\n  isCollectionFetching: selectIsCollectionFetching,\n  isColletionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shop);","map":{"version":3,"sources":["C:/Nodejs/ecomm/src/pages/shop/Shop.js"],"names":["React","useEffect","CollectionOverview","Route","Collection","connect","createStructuredSelector","fetchCollectionsStart","WithSpinner","selectIsCollectionFetching","selectIsCollectionsLoaded","CollectionOverviewWithSpinner","CollectionWithSpinner","Shop","match","isCollectionFetching","isColletionsLoaded","path","props","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,kBAAP,MAA+B,yDAA/B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,wBAAT,QAAyC,UAAzC,C,CACA;;AACA,SAASC,qBAAT,QAAsC,8BAAtC;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,SAASC,0BAAT,EAAsCC,yBAAtC,QAAuE,+BAAvE;AAGA,MAAMC,6BAA6B,GAAGH,WAAW,CAACN,kBAAD,CAAjD;AACA,MAAMU,qBAAqB,GAAGJ,WAAW,CAACJ,UAAD,CAAzC;;AAGA,MAAMS,IAAI,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAUC,EAAAA,oBAAV;AAAiCC,EAAAA,kBAAjC;AAAsDT,EAAAA;AAAtD,CAAD,KAAiF;AAE1FN,EAAAA,SAAS,CAAC,MAAK;AACXM,IAAAA,qBAAqB;AACxB,GAFQ,EAEP,CAACA,qBAAD,CAFO,CAAT,CAF0F,CAM1F;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGI;AACA;;AACJ,sBACQ;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAE,KAAF;AAAQ,IAAA,KAAK,MAAb;AAAc,IAAA,IAAI,EAAG,GAAEO,KAAK,CAACG,IAAK,EAAlC;AACA,IAAA,MAAM,EAAOC,KAAF,iBAAc,oBAAC,6BAAD;AAA+B,MAAA,SAAS,EAAGH;AAA3C,OAAsEG,KAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAGI,oBAAE,KAAF;AAAQ,IAAA,KAAK,MAAb;AAAc,IAAA,IAAI,EAAG,GAAEJ,KAAK,CAACG,IAAK,gBAAlC;AACA,IAAA,MAAM,EAAOC,KAAF,iBAAc,oBAAC,qBAAD;AAAuB,MAAA,SAAS,EAAG,CAACF;AAApC,OAA6DE,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADR;AAUH,CArED;;AAuEA,MAAMC,eAAe,GAAGb,wBAAwB,CAAE;AAC9CS,EAAAA,oBAAoB,EAAGN,0BADuB;AAE9CO,EAAAA,kBAAkB,EAAGN;AAFyB,CAAF,CAAhD;;AAKA,MAAMU,kBAAkB,GAAGC,QAAQ,KAAK;AACpC;AACAd,EAAAA,qBAAqB,EAAE,MAAMc,QAAQ,CAACd,qBAAqB,EAAtB;AAFD,CAAL,CAAnC;;AAKA,eAAeF,OAAO,CAACc,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CP,IAA7C,CAAf","sourcesContent":["import React , {useEffect } from 'react'\nimport CollectionOverview from '../../components/collection-overview/CollectionOverview'\nimport { Route } from 'react-router-dom'\nimport Collection from '../collection/Collection'\n// import {firestore , convertCollectionsSnapshotToMap} from '../../firebase/Firebase'\nimport { connect } from 'react-redux'\n// import { updateCollections } from '../../redux/shop/ShopActions'\nimport { createStructuredSelector } from 'reselect'\n// import { fetchCollectionsStartAsync } from '../../redux/shop/ShopActions';\nimport { fetchCollectionsStart } from '../../redux/shop/ShopActions';\nimport WithSpinner from '../../components/withSpinner/WithSpinner'\nimport { selectIsCollectionFetching , selectIsCollectionsLoaded } from '../../redux/shop/ShopSelector'\n\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview)\nconst CollectionWithSpinner = WithSpinner(Collection)\n\n\nconst Shop = ({ match , isCollectionFetching , isColletionsLoaded , fetchCollectionsStart}) =>{\n\n    useEffect(() =>{\n        fetchCollectionsStart()\n    },[fetchCollectionsStart])\n\n    // state = {\n    //     loading : true\n    // }\n    // unsubscribeFromSnapshot=null;\n\n    // componentDidMount(){\n    //     const { updateCollections } = this.props\n    //     const collectionRef= firestore.collection('collections');\n\n    //     // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //     //     // console.log(snapshot)\n    //     //     const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n    //     //     console.log(collectionsMap)\n    //     //     updateCollections(collectionsMap)\n    //     //     this.setState({ loading : false })\n    //     // }) ** This is object returning method\n\n    //     collectionRef.get().then(\n    //         snapshot => {\n    //                 // console.log(snapshot)\n    //                 const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n    //                 console.log(collectionsMap)\n    //                 updateCollections(collectionsMap)\n    //                 this.setState({ loading : false })\n    //             }\n    //     ) //**this is a promise based request\n\n    //     // fetch('https://firestore.googleapis.com/v1/projects/crown-db-f5972/databases/(default)/documents/collections')\n    //     // .then(response => response.json())\n    //     // .then(collections => console.log(collections))\n\n    //     // collectionRef.get().then(\n    //     //     snapshot => {\n    //     //             // console.log(snapshot)\n    //     //             const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n    //     //             console.log(collectionsMap)\n    //     //             updateCollections(collectionsMap)\n    //     //             this.setState({ loading : false })\n    //     //         }\n    //     // )\n    // }\n\n    // componentDidMount() {\n    //     const { fetchCollectionsStart } = this.props;\n    \n    //     // fetchCollectionsStartAsync();\n    //     fetchCollectionsStart();\n    //     //fetchCollectionsStart is the name of our saga\n    //   }\n\n    \n        // const {match , isCollectionFetching , isColletionsLoaded} = this.props;\n        // const { loading } = this.state\n    return(\n            <div className='shop-page'>\n                < Route exact path={`${match.path}`} \n                render = { ( props ) =>  <CollectionOverviewWithSpinner isLoading={ isCollectionFetching } {...props} /> } /> \n                < Route exact path={`${match.path}/:collectionId`} \n                render = { ( props ) =>  <CollectionWithSpinner isLoading={ !isColletionsLoaded } {...props} /> }  />\n            </div>\n        )\n        \n    \n}\n\nconst mapStateToProps = createStructuredSelector ({\n    isCollectionFetching : selectIsCollectionFetching,\n    isColletionsLoaded : selectIsCollectionsLoaded\n})\n\nconst mapDispatchToProps = dispatch => ({\n    // fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync())\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n  });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Shop)"]},"metadata":{},"sourceType":"module"}