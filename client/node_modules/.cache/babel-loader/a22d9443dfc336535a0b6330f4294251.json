{"ast":null,"code":"import { takeEvery, takeLatest, call, put } from 'redux-saga/effects'; //takeEvery listens for every action of the specific type that we pass to it \n// Sagas do not dispatch actions using dispatch keyword, they use another effect called put\n\nimport ShopActionTypes from './ShopTypes';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/Firebase';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './ShopActions';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get(); //** the value from collectionRef.get() comes in the form of promise \n\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  } // dispatch(fetchCollectionsStart)\n  // collectionRef.get().then(\n  //     snapshot => {\n  //             console.log(snapshot)\n  //             const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n  //             console.log(collectionsMap)\n  //             // updateCollections(collectionsMap)\n  //             dispatch(fetchCollectionsSuccess(collectionsMap))\n  //             // this.setState({ loading : false })\n  //         }).catch(error => dispatch(fetchCollectionsFailure(error.message)) )\n\n}\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Nodejs/ecomm/src/redux/shop/ShopSaga.js"],"names":["takeEvery","takeLatest","call","put","ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsAsync","console","log","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,EAAqBC,UAArB,EAAkCC,IAAlC,EAAyCC,GAAzC,QAAoD,oBAApD,C,CACA;AACA;;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,SAAT,EAAqBC,+BAArB,QAA4D,yBAA5D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,eAAjE;AAEA,OAAO,UAAUC,qBAAV,GAAiC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AAGA,MAAG;AACH,UAAMC,aAAa,GAAEP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAArB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAFG,CAEuC;;AAC1C,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAACI,+BAAD,EAAmCQ,QAAnC,CAAjC;AACA,UAAMX,GAAG,CAACI,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACC,GALD,CAMA,OAAMC,KAAN,EAAY;AACX,UAAMd,GAAG,CAACK,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACA,GAZoC,CAiBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEP;AAED,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMlB,UAAU,CAACG,eAAe,CAACgB,uBAAjB,EAA0CX,qBAA1C,CAAhB;AACH","sourcesContent":["import { takeEvery , takeLatest , call , put } from 'redux-saga/effects'\r\n//takeEvery listens for every action of the specific type that we pass to it \r\n// Sagas do not dispatch actions using dispatch keyword, they use another effect called put\r\nimport ShopActionTypes from './ShopTypes'\r\nimport { firestore , convertCollectionsSnapshotToMap } from '../../firebase/Firebase'\r\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './ShopActions'\r\n\r\nexport function* fetchCollectionsAsync(){\r\n   yield console.log('I am fired')\r\n\r\n\r\n   try{\r\n   const collectionRef= firestore.collection('collections');\r\n   const snapshot = yield collectionRef.get()//** the value from collectionRef.get() comes in the form of promise \r\n   const collectionsMap = yield call(convertCollectionsSnapshotToMap , snapshot )\r\n   yield put(fetchCollectionsSuccess(collectionsMap))\r\n   }  \r\n   catch(error){\r\n    yield put(fetchCollectionsFailure(error.message))\r\n   }  \r\n\r\n\r\n\r\n\r\n        // dispatch(fetchCollectionsStart)\r\n        // collectionRef.get().then(\r\n        //     snapshot => {\r\n        //             console.log(snapshot)\r\n        //             const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\r\n        //             console.log(collectionsMap)\r\n        //             // updateCollections(collectionsMap)\r\n        //             dispatch(fetchCollectionsSuccess(collectionsMap))\r\n        //             // this.setState({ loading : false })\r\n        //         }).catch(error => dispatch(fetchCollectionsFailure(error.message)) )\r\n        \r\n}\r\n\r\nexport function* fetchCollectionsStart(){\r\n    yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync )\r\n}"]},"metadata":{},"sourceType":"module"}