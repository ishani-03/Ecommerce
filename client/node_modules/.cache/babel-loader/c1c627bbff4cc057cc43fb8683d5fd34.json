{"ast":null,"code":"var _jsxFileName = \"C:\\\\Nodejs\\\\ecomm\\\\src\\\\pages\\\\shop\\\\Shop.js\";\nimport React from 'react';\nimport CollectionOverview from '../../components/collection-overview/CollectionOverview';\nimport { Route } from 'react-router-dom';\nimport Collection from '../collection/Collection';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/Firebase';\nimport { connect } from 'react-redux';\nimport { updateCollections } from '../../redux/shop/ShopActions';\nimport WithSpinner from '../../components/withSpinner/WithSpinner';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview);\nconst CollectionWithSpinner = WithSpinner(Collection);\n\nclass Shop extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections'); // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n    //     // console.log(snapshot)\n    //     const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n    //     console.log(collectionsMap)\n    //     updateCollections(collectionsMap)\n    //     this.setState({ loading : false })\n    // }) ** This is object returning method\n    // collectionRef.get().then(\n    //     snapshot => {\n    //             // console.log(snapshot)\n    //             const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n    //             console.log(collectionsMap)\n    //             updateCollections(collectionsMap)\n    //             this.setState({ loading : false })\n    //         }\n    // ) **this is a promise based request\n\n    fetch('https://firestore.googleapis.com/v1/projects/crown-db-f5972/databases/(default)/documents/collections').then(response => response.json()).then(collections => console.log(collections));\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop=page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 42\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 42\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(Shop);","map":{"version":3,"sources":["C:/Nodejs/ecomm/src/pages/shop/Shop.js"],"names":["React","CollectionOverview","Route","Collection","firestore","convertCollectionsSnapshotToMap","connect","updateCollections","WithSpinner","CollectionOverviewWithSpinner","CollectionWithSpinner","Shop","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","fetch","then","response","json","collections","console","log","render","match","path","mapDispatchToProps","dispatch","collectionsMap"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,yDAA/B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAAQC,SAAR,EAAoBC,+BAApB,QAA0D,yBAA1D;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AAGA,MAAMC,6BAA6B,GAAGD,WAAW,CAACP,kBAAD,CAAjD;AACA,MAAMS,qBAAqB,GAAGF,WAAW,CAACL,UAAD,CAAzC;;AAGA,MAAMQ,IAAN,SAAmBX,KAAK,CAACY,SAAzB,CAAoC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AACJC,MAAAA,OAAO,EAAG;AADN,KADwB;AAAA,SAIhCC,uBAJgC,GAIR,IAJQ;AAAA;;AAMhCC,EAAAA,iBAAiB,GAAE;AACf,UAAM;AAAET,MAAAA;AAAF,QAAwB,KAAKU,KAAnC;AACA,UAAMC,aAAa,GAAEd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAArB,CAFe,CAIf;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,IAAAA,KAAK,CAAC,uGAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,WAAW,IAAIC,OAAO,CAACC,GAAR,CAAYF,WAAZ,CAFrB;AAGH;;AAEDG,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAU,KAAKX,KAArB;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACJ,wBACQ;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAE,KAAF;AAAQ,MAAA,KAAK,MAAb;AAAc,MAAA,IAAI,EAAG,GAAEe,KAAK,CAACC,IAAK,EAAlC;AACA,MAAA,MAAM,EAAOZ,KAAF,iBAAc,oBAAC,6BAAD;AAA+B,QAAA,SAAS,EAAGH;AAA3C,SAAyDG,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI,oBAAE,KAAF;AAAQ,MAAA,KAAK,MAAb;AAAc,MAAA,IAAI,EAAG,GAAEW,KAAK,CAACC,IAAK,gBAAlC;AACA,MAAA,MAAM,EAAOZ,KAAF,iBAAc,oBAAC,qBAAD;AAAuB,QAAA,SAAS,EAAGH;AAAnC,SAAiDG,KAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADR;AASC;;AA7C+B;;AAgDpC,MAAMa,kBAAkB,GAAGC,QAAQ,KAAK;AACpCxB,EAAAA,iBAAiB,EAAGyB,cAAc,IAAID,QAAQ,CAACxB,iBAAiB,CAACyB,cAAD,CAAlB;AADV,CAAL,CAAnC;;AAIA,eAAe1B,OAAO,CAAC,IAAD,EAAOwB,kBAAP,CAAP,CAAkCnB,IAAlC,CAAf","sourcesContent":["import React from 'react'\nimport CollectionOverview from '../../components/collection-overview/CollectionOverview'\nimport { Route } from 'react-router-dom'\nimport Collection from '../collection/Collection'\nimport {firestore , convertCollectionsSnapshotToMap} from '../../firebase/Firebase'\nimport { connect } from 'react-redux'\nimport { updateCollections } from '../../redux/shop/ShopActions'\nimport WithSpinner from '../../components/withSpinner/WithSpinner'\n\n\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionOverview)\nconst CollectionWithSpinner = WithSpinner(Collection)\n\n\nclass Shop extends React.Component  {\n    state = {\n        loading : true\n    }\n    unsubscribeFromSnapshot=null;\n\n    componentDidMount(){\n        const { updateCollections } = this.props\n        const collectionRef= firestore.collection('collections');\n\n        // this.unsubscribeFromSnapshot = collectionRef.onSnapshot(async snapshot => {\n        //     // console.log(snapshot)\n        //     const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n        //     console.log(collectionsMap)\n        //     updateCollections(collectionsMap)\n        //     this.setState({ loading : false })\n        // }) ** This is object returning method\n\n        // collectionRef.get().then(\n        //     snapshot => {\n        //             // console.log(snapshot)\n        //             const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\n        //             console.log(collectionsMap)\n        //             updateCollections(collectionsMap)\n        //             this.setState({ loading : false })\n        //         }\n        // ) **this is a promise based request\n\n        fetch('https://firestore.googleapis.com/v1/projects/crown-db-f5972/databases/(default)/documents/collections')\n        .then(response => response.json())\n        .then(collections => console.log(collections))\n    }\n\n    render(){\n        const {match} = this.props;\n        const { loading } = this.state\n    return(\n            <div className='shop=page'>\n                < Route exact path={`${match.path}`} \n                render = { ( props ) =>  <CollectionOverviewWithSpinner isLoading={ loading } {...props} /> } /> \n                < Route exact path={`${match.path}/:collectionId`} \n                render = { ( props ) =>  <CollectionWithSpinner isLoading={ loading } {...props} /> }  />\n            </div>\n        )\n        \n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    updateCollections : collectionsMap => dispatch(updateCollections(collectionsMap))\n})\n\nexport default connect(null, mapDispatchToProps)(Shop)"]},"metadata":{},"sourceType":"module"}