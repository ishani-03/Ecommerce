{"ast":null,"code":"import ShopActionTypes from './ShopTypes';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/Firebase'; // export const updateCollections = (collectionsMap) =>({\n//     type : ShopActionTypes.UPDATE_COLLECTIONS,\n//     payload : collectionsMap\n// })\n//Using redux thunk:function that returns a function that gets dispatched so that whenever dispatch is called it fire multiple actions\n\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_START\n});\nexport const fetchCollectionsSuccess = collectionsMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionsMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); //this is going to be the actual function that we pass into our component to begin this process\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    const collectionRef = firestore.collection('collections');\n    dispatch(fetchCollectionsStart);\n    collectionRef.get().then(snapshot => {\n      console.log(snapshot);\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      console.log(collectionsMap); // updateCollections(collectionsMap)\n\n      dispatch(fetchCollectionsSuccess(collectionsMap)); // this.setState({ loading : false })\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["C:/Nodejs/ecomm/client/src/redux/shop/ShopActions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","console","log","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,aAA5B;AACA,SAAQC,SAAR,EAAoBC,+BAApB,QAA0D,yBAA1D,C,CAEA;AACA;AACA;AACA;AAEA;;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAGJ,eAAe,CAACK;AADiB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,cAAc,KAAK;AACtDH,EAAAA,IAAI,EAACJ,eAAe,CAACQ,yBADiC;AAEtDC,EAAAA,OAAO,EAAGF;AAF4C,CAAL,CAA9C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACpDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBAD8B;AAEpDH,EAAAA,OAAO,EAAGE;AAF0C,CAAL,CAA5C,C,CAKP;;AACA,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAG;AACd,UAAMC,aAAa,GAAEd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAArB;AACAF,IAAAA,QAAQ,CAACX,qBAAD,CAAR;AACAY,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CACIC,QAAQ,IAAI;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,YAAMZ,cAAc,GAAIL,+BAA+B,CAACiB,QAAD,CAAvD;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYd,cAAZ,EAHI,CAIJ;;AACAO,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR,CALI,CAMJ;AACH,KART,EAQWe,KARX,CAQiBC,KAAK,IAAIT,QAAQ,CAACJ,uBAAuB,CAACa,KAAK,CAACC,OAAP,CAAxB,CARlC;AASH,GAZD;AAaH,CAdM","sourcesContent":["import ShopActionTypes from './ShopTypes'\r\nimport {firestore , convertCollectionsSnapshotToMap} from '../../firebase/Firebase'\r\n\r\n// export const updateCollections = (collectionsMap) =>({\r\n//     type : ShopActionTypes.UPDATE_COLLECTIONS,\r\n//     payload : collectionsMap\r\n// })\r\n\r\n//Using redux thunk:function that returns a function that gets dispatched so that whenever dispatch is called it fire multiple actions\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type : ShopActionTypes.FETCH_COLLECTIONS_START,\r\n})\r\n\r\nexport const fetchCollectionsSuccess = collectionsMap => ({\r\n    type:ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload : collectionsMap\r\n})\r\n\r\nexport const fetchCollectionsFailure = errorMessage => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload : errorMessage\r\n})\r\n\r\n//this is going to be the actual function that we pass into our component to begin this process\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch =>{\r\n        const collectionRef= firestore.collection('collections');\r\n        dispatch(fetchCollectionsStart)\r\n        collectionRef.get().then(\r\n            snapshot => {\r\n                    console.log(snapshot)\r\n                    const collectionsMap =  convertCollectionsSnapshotToMap(snapshot)\r\n                    console.log(collectionsMap)\r\n                    // updateCollections(collectionsMap)\r\n                    dispatch(fetchCollectionsSuccess(collectionsMap))\r\n                    // this.setState({ loading : false })\r\n                }).catch(error => dispatch(fetchCollectionsFailure(error.message)) )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}