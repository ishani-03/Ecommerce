{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './UserTypes';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/Firebase'; // import {googleSignInSuccess , googleSignInFailure , emailSignInSuccess , emailSignInFailure } from './UserAction'\n\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './UserAction';\nexport function* getSnapshotFomUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n    console.log(userRef);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFomUserAuth(user); // const userRef = yield call(createUserProfileDocument, user)\n    // // const userRef = await createUserProfileDocument(userAuth); <-- the above line is same as this\n    // const userSnapshot = yield userRef.get()\n    // // Remember: 'put' puts things back into our regular redux flow\n    // yield put(signInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \n    // console.log(userRef)\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFomUserAuth(user); // const userRef = yield call(createUserProfileDocument, user)\n    // const userSnapshot = yield userRef.get()\n    // yield put(signInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \n    // console.log(userRef)\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) {\n      return;\n    }\n\n    yield getSnapshotFomUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFomUserAuth(user, additionalData);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Nodejs/ecomm/src/redux/user/UserSaga.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","getSnapshotFomUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","console","log","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest , put , all , call } from 'redux-saga/effects'\r\nimport UserActionTypes from './UserTypes'\r\nimport { auth, googleProvider , createUserProfileDocument , getCurrentUser } from '../../firebase/Firebase'\r\n// import {googleSignInSuccess , googleSignInFailure , emailSignInSuccess , emailSignInFailure } from './UserAction'\r\nimport {signInSuccess , signInFailure, signOutSuccess , signOutFailure , signUpSuccess , signUpFailure} from './UserAction'\r\n\r\nexport function* getSnapshotFomUserAuth(userAuth , additionalData){\r\n    try{\r\n        const userRef = yield call(createUserProfileDocument, userAuth , additionalData)\r\n        const userSnapshot = yield userRef.get()\r\n        yield put(signInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \r\n        console.log(userRef)\r\n    }\r\n    catch(error){\r\n      yield  put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle(){\r\n    try{\r\n\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFomUserAuth(user)\r\n        // const userRef = yield call(createUserProfileDocument, user)\r\n        // // const userRef = await createUserProfileDocument(userAuth); <-- the above line is same as this\r\n        // const userSnapshot = yield userRef.get()\r\n        // // Remember: 'put' puts things back into our regular redux flow\r\n        // yield put(signInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \r\n        // console.log(userRef)\r\n\r\n\r\n    }catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({payload: {email,password}}){\r\n    try{\r\n        const {user} = yield auth.signInWithEmailAndPassword(email,password)\r\n        yield getSnapshotFomUserAuth(user)\r\n        // const userRef = yield call(createUserProfileDocument, user)\r\n        // const userSnapshot = yield userRef.get()\r\n        // yield put(signInSuccess({id: userSnapshot.id , ...userSnapshot.data() })) \r\n        // console.log(userRef)\r\n    }\r\n    catch(error){\r\n      yield  put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\n    try{\r\n        const userAuth = yield getCurrentUser()\r\n        if(!userAuth){\r\n            return;\r\n        }\r\n        yield getSnapshotFomUserAuth(userAuth)\r\n    }\r\n    catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\n\r\nexport function* signOut(){\r\n    try{\r\n        yield auth.signOut()\r\n        yield put(signOutSuccess())\r\n    }catch(error){\r\n        yield put(signOutFailure(error))\r\n    }\r\n}\r\n\r\n\r\nexport function* signUp({payload: {email, password, displayName }}){\r\n    try{\r\n        const { user } = yield auth.createUserWithEmailAndPassword(email,password);\r\n        yield put(signUpSuccess({ user, additionalData :{ displayName } }))\r\n    }catch(error){\r\n       yield put(signUpFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInAfterSignUp({payload : {user, additionalData}}){\r\n    yield getSnapshotFomUserAuth(user, additionalData)\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* onSignOutStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut )\r\n}\r\n\r\nexport function* onSignUpStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START)\r\n}\r\n\r\nexport function* onSignUpSuccess(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\r\n\r\n}\r\n\r\nexport function* userSagas(){\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(onCheckUserSession),\r\n        call(onSignOutStart),\r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess)\r\n    ])\r\n        \r\n}"]},"metadata":{},"sourceType":"module"}